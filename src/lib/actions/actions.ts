"use server"

interface QuestionFormData {
  id: string
  name: string
  email: string
  phone?: string
  question: string
  type: "question" | "consultation" // –ù–æ–≤–∏–π —Ç–∏–ø
  service?: string // –î–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π
  createdAt: Date
  status: "new" | "read" | "replied"
}

interface ActionResult {
  success: boolean
  message: string
  data?: QuestionFormData
}

// –¢–∏–º—á–∞—Å–æ–≤–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤ –ø–∞–º'—è—Ç—ñ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ - –±–∞–∑–∞ –¥–∞–Ω–∏—Ö)
let questions: QuestionFormData[] = []

export async function submitQuestion(prevState: ActionResult | null, formData: FormData): Promise<ActionResult> {
  try {
    const name = formData.get("name") as string
    const email = formData.get("email") as string
    const phone = formData.get("phone") as string
    const question = formData.get("question") as string

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!name || name.trim().length < 2) {
      return {
        success: false,
        message: "–Ü–º'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 2 —Å–∏–º–≤–æ–ª–∏",
      }
    }

    if (!email || !isValidEmail(email)) {
      return {
        success: false,
        message: "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π email –∞–¥—Ä–µ—Å",
      }
    }

    if (!question || question.trim().length < 10) {
      return {
        success: false,
        message: "–ó–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 10 —Å–∏–º–≤–æ–ª—ñ–≤",
      }
    }

    const questionData: QuestionFormData = {
      id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
      name: name.trim(),
      email: email.trim().toLowerCase(),
      phone: phone?.trim() || undefined,
      question: question.trim(),
      type: "question",
      createdAt: new Date(),
      status: "new",
    }

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
    questions.unshift(questionData) // –î–æ–¥–∞—î–º–æ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ (–Ω–æ–≤—ñ –∑–≤–µ—Ä—Ö—É)

    console.log(`ü©∫ –ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ ${questionData.name} (${questionData.email})`)

    return {
      success: true,
      message: "–í–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ! –õ—ñ–∫–∞—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
      data: questionData,
    }
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:", error)
    return {
      success: false,
      message: "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É.",
    }
  }
}

export async function submitConsultation(formData: {
  name: string
  phone: string
  email?: string
  service: string
  message: string
}): Promise<{ success: boolean; message: string; data?: QuestionFormData }> {
  try {
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!formData.name || formData.name.trim().length < 2) {
      return {
        success: false,
        message: "–Ü–º'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 2 —Å–∏–º–≤–æ–ª–∏",
      }
    }

    if (!formData.phone || formData.phone.trim().length < 10) {
      return {
        success: false,
        message: "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É",
      }
    }

    if (!formData.service) {
      return {
        success: false,
        message: "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É",
      }
    }

    const consultationData: QuestionFormData = {
      id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
      name: formData.name.trim(),
      email: formData.email?.trim().toLowerCase() || "",
      phone: formData.phone.trim(),
      question: `–ü–æ—Å–ª—É–≥–∞: ${formData.service}\n\n–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${formData.message || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}`,
      type: "consultation",
      service: formData.service,
      createdAt: new Date(),
      status: "new",
    }

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é
    questions.unshift(consultationData)

    console.log(`üìÖ –ù–æ–≤–∏–π –∑–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –≤—ñ–¥ ${consultationData.name} (${consultationData.phone})`)
    console.log(`üè• –ü–æ—Å–ª—É–≥–∞: ${formData.service}`)

    return {
      success: true,
      message: "–í–∞—à –∑–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
      data: consultationData,
    }
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é:", error)
    return {
      success: false,
      message: "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É.",
    }
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç–∞–Ω—å
export async function getAllQuestions(): Promise<QuestionFormData[]> {
  return questions
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
export async function updateQuestionStatus(id: string, status: "new" | "read" | "replied"): Promise<boolean> {
  const questionIndex = questions.findIndex(q => q.id === id)
  if (questionIndex !== -1) {
    questions[questionIndex].status = status
    return true
  }
  return false
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
export async function deleteQuestion(id: string): Promise<boolean> {
  const initialLength = questions.length
  questions = questions.filter(q => q.id !== id)
  return questions.length < initialLength
}

export async function getConsultations(): Promise<QuestionFormData[]> {
  return questions.filter(q => q.type === "consultation")
}

export async function getQuestions(): Promise<QuestionFormData[]> {
  return questions.filter(q => q.type === "question")
}

function isValidEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  return emailRegex.test(email)
}
